{%- from "ceph/map.jinja" import global_settings with context -%}
{%- from "ceph/map.jinja" import mon_settings with context -%}
{%- from "ceph/map.jinja" import osd_settings with context -%}
{%- from "ceph/map.jinja" import client_settings with context -%}
{%- from "ceph/map.jinja" import rgw_settings with context -%}

[global]
    fsid = {{ global_settings.get('fsid') }}
    public network = {{ global_settings.get('public_network') }}
    cluster network = {{ global_settings.get('cluster_network') }}
    auth cluster required = cephx
    auth service required = cephx
    auth client required = cephx

{%- for mon, ip_map in salt['mine.get']('ceph:mon:enabled:true','ip_map','pillar').items() %}
{%- set tmp, mon_hostname = salt['mine.get'](mon, 'hostname').items()[0] %}

[mon.{{ mon_hostname }}]
    host = {{ mon_hostname }}
    mon addr = {{ ip_map[mon_settings.interface][0] }}:6789

{%- endfor %}

{% if osd_settings.get('enabled', False) %}
[osd]
    osd journal size = {{ osd_settings.configs.get('osd_journal_size') }}

    osd pool default size = {{ osd_settings.configs.get('osd_pool_default_size') }}
    osd pool default min size = {{ osd_settings.configs.get('osd_pool_default_min_size') }}
    osd pool default pg num = {{ osd_settings.configs.get('osd_pool_default_pg_num') }}
    osd pool default pgp num = {{ osd_settings.configs.get('osd_pool_default_pgp_num') }}

    osd crush chooseleaf type = {{ osd_settings.configs.get('osd_crush_chooseleaf_type') }}
    osd crush update on start = {{ osd_settings.configs.get('osd_crush_update_on_start') }}

    osd op threads = {{ osd_settings.configs.get('osd_op_threads') }}
    osd disk threads = {{ osd_settings.configs.get('osd_disk_threads') }}
    osd max backfills = {{ osd_settings.configs.get('osd_max_backfills') }}
    osd map cache size = {{ osd_settings.configs.get('osd_map_cache_size') }}
    osd scrub load threshold = {{ osd_settings.configs.get('osd_scrub_load_threshold') }}

    filestore merge threshold = {{ osd_settings.configs.get('filestore_merge_threshold') }}
    filestore split multiple = {{ osd_settings.configs.get('filestore_split_multiple') }}
    filestore op threads = {{ osd_settings.configs.get('filestore_op_threads') }}

    filestore max sync interval = {{ osd_settings.configs.get('filestore_max_sync_interval') }}
    filestore min sync interval = {{ osd_settings.configs.get('filestore_min_sync_interval') }}

    filestore queue max ops = {{ osd_settings.configs.get('filestore_queue_max_ops') }}
    filestore queue max bytes = {{ osd_settings.configs.get('filestore_queue_max_bytes') }}
    filestore queue committing max ops = {{ osd_settings.configs.get('filestore_queue_committing_max_ops') }}
    filestore queue committing max bytes = {{ osd_settings.configs.get('filestore_queue_committing_max_bytes') }}
{%- endif %}

{% if client_settings.get('enabled', False) %}
[client]
    rbd cache = {{ client_settings.get('rbd_cache') }}
    rbd cache writethrough until flush = {{ client_settings.get('rbd_cache_writethrough_until_flush') }}
    rbd cache size = {{ client_settings.get('rbd_cache_size') }}

{%- if rgw_settings.get('enabled', False) and rgw_settings.identity is defined and rgw_settings.identity.get('engine', '') == 'keystone' %}
{%- set keystone = rgw_settings.identity %}
    rgw keystone api version = {{ keystone.get('version') }}
    rgw keystone url =  {{ keystone.get('url') }}

    {%- if keystone.user is defined %}
    rgw keystone admin user = {{ keystone.get('user') }}
    rgw keystone admin password = {{ keystone.get('password') }}
    {%- elif keystone.token is defined %}
    rgw keystone admin token = {{ keystone.get('token') }}
    {%- endif -%}
    
    {%- if keystone.user is defined and keystone.tenant is defined %}
    rgw keystone admin tenant = {{ keystone.get('tenant') }}
    {%- endif %}
    {%- if keystone.user is defined and keystone.domain is defined %}
    rgw keystone admin domain = {{ keystone.get('domain') }}
    rgw keystone admin project = {{ keystone.get('project') }}
    {%- endif %}
    rgw keystone accepted roles = {{ keystone.get('accepted_roles', []) | join(', ') }}
    rgw keystone token cache size = {{ keystone.get('token_cache_size', 10000) }}
    rgw keystone revocation interval = {{ keystone.get('revocation_interval', 900) }}
    # As of Jewel release, it's important to keep this option disabled.
    # Otherwise, buckets/containers and users are created with different formats when
    # S3/Swift APIs are used. ( <tenant>/<bucket> vs <bucket> and <tenant>$<tenant> vs
    # <tenant> )
    rgw keystone implicit tenants = False
    rgw s3 auth use keystone = {{ keystone.get('s3_auth_use_keystone', true) }}
    rgw keystone verify ssl = {{ keystone.get('verify_ssl', true) }}
    {% if keystone.get('verify_ssl', false) -%}
    nss db path = {{ rgw_settings.radosgw_dirs.get('nss_db_dir', '/var/lib/ceph/nss') }}
    {% endif -%}

{%- endif %}
{%- endif %}

{% if rgw_settings.get('enabled', False) %}
{% for rgw, ip_map in salt['mine.get']('ceph:rgw:enabled:true','ip_map','pillar').items() -%}
{% set tmp, rgw_hostname = salt['mine.get'](rgw, 'hostname').items()[0] -%}
{% set rgw_id = "rgw." ~ rgw_hostname -%}
{% set rgw_name = "client." ~ rgw_id -%}
{% set rgw_keyring = "/var/lib/ceph/radosgw/" ~ global_settings.cluster ~ "-" ~ rgw_id ~ "/keyring" -%}
{% set rgw_log = rgw_settings.radosgw_dirs.log_dir ~ "/" ~ global_settings.cluster ~ "-" ~ rgw_name ~ ".log" -%}

[{{ rgw_name }}]
    host = {{ rgw_hostname }}
    rgw dns name = {{ rgw_settings.get('dns_name') }}
    keyring = {{ rgw_keyring }}
    rgw frontends = "civetweb port={{ rgw_settings.port }}"
    log file = {{ rgw_log }}

{% endfor %}
{% endif %}

